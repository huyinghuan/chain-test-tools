// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/multi_sign.proto

package syscontract

import (
	common "chainmaker.org/chainmaker/pb-go/v2/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of managing multi signature
type MultiSignFunction int32

const (
	// multi signature request
	MultiSignFunction_REQ MultiSignFunction = 0
	// multi signature voting
	MultiSignFunction_VOTE MultiSignFunction = 1
	// multi signature query
	MultiSignFunction_QUERY MultiSignFunction = 2
)

var MultiSignFunction_name = map[int32]string{
	0: "REQ",
	1: "VOTE",
	2: "QUERY",
}

var MultiSignFunction_value = map[string]int32{
	"REQ":   0,
	"VOTE":  1,
	"QUERY": 2,
}

func (x MultiSignFunction) String() string {
	return proto.EnumName(MultiSignFunction_name, int32(x))
}

func (MultiSignFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{0}
}

type VoteStatus int32

const (
	VoteStatus_AGREE  VoteStatus = 0
	VoteStatus_REJECT VoteStatus = 1
)

var VoteStatus_name = map[int32]string{
	0: "AGREE",
	1: "REJECT",
}

var VoteStatus_value = map[string]int32{
	"AGREE":  0,
	"REJECT": 1,
}

func (x VoteStatus) String() string {
	return proto.EnumName(VoteStatus_name, int32(x))
}

func (VoteStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{1}
}

// smart contract runtime, contains vm type and language type
type MultiSignStatus int32

const (
	MultiSignStatus_PROCESSING MultiSignStatus = 0
	MultiSignStatus_ADOPTED    MultiSignStatus = 1
	MultiSignStatus_REFUSED    MultiSignStatus = 2
	MultiSignStatus_FAILED     MultiSignStatus = 3
)

var MultiSignStatus_name = map[int32]string{
	0: "PROCESSING",
	1: "ADOPTED",
	2: "REFUSED",
	3: "FAILED",
}

var MultiSignStatus_value = map[string]int32{
	"PROCESSING": 0,
	"ADOPTED":    1,
	"REFUSED":    2,
	"FAILED":     3,
}

func (x MultiSignStatus) String() string {
	return proto.EnumName(MultiSignStatus_name, int32(x))
}

func (MultiSignStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{2}
}

// current contract status
type ContractStatus int32

const (
	// normal, can be invoked
	ContractStatus_NORMAL ContractStatus = 0
	// frozen, cannot be invoked temporarily
	ContractStatus_FROZEN ContractStatus = 1
	// revoked, cannot be invoked permanently
	ContractStatus_REVOKED ContractStatus = 2
)

var ContractStatus_name = map[int32]string{
	0: "NORMAL",
	1: "FROZEN",
	2: "REVOKED",
}

var ContractStatus_value = map[string]int32{
	"NORMAL":  0,
	"FROZEN":  1,
	"REVOKED": 2,
}

func (x ContractStatus) String() string {
	return proto.EnumName(ContractStatus_name, int32(x))
}

func (ContractStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{3}
}

type MultiReq_Parameter int32

const (
	MultiReq_SYS_CONTRACT_NAME MultiReq_Parameter = 0
	MultiReq_SYS_METHOD        MultiReq_Parameter = 1
)

var MultiReq_Parameter_name = map[int32]string{
	0: "SYS_CONTRACT_NAME",
	1: "SYS_METHOD",
}

var MultiReq_Parameter_value = map[string]int32{
	"SYS_CONTRACT_NAME": 0,
	"SYS_METHOD":        1,
}

func (x MultiReq_Parameter) String() string {
	return proto.EnumName(MultiReq_Parameter_name, int32(x))
}

func (MultiReq_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{2, 0}
}

type MultiVote_Parameter int32

const (
	MultiVote_VOTE_INFO MultiVote_Parameter = 0
	MultiVote_TX_ID     MultiVote_Parameter = 1
)

var MultiVote_Parameter_name = map[int32]string{
	0: "VOTE_INFO",
	1: "TX_ID",
}

var MultiVote_Parameter_value = map[string]int32{
	"VOTE_INFO": 0,
	"TX_ID":     1,
}

func (x MultiVote_Parameter) String() string {
	return proto.EnumName(MultiVote_Parameter_name, int32(x))
}

func (MultiVote_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{3, 0}
}

type MultiQuery_Parameter int32

const (
	MultiQuery_TX_ID MultiQuery_Parameter = 0
)

var MultiQuery_Parameter_name = map[int32]string{
	0: "TX_ID",
}

var MultiQuery_Parameter_value = map[string]int32{
	"TX_ID": 0,
}

func (x MultiQuery_Parameter) String() string {
	return proto.EnumName(MultiQuery_Parameter_name, int32(x))
}

func (MultiQuery_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{4, 0}
}

type MultiSignInfo struct {
	// current tx payload
	Payload *common.Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// call system contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// call system contract method
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// call system contract parameters
	//repeated common.KeyValuePair parameters = 4;
	// status
	Status MultiSignStatus `protobuf:"varint,4,opt,name=status,proto3,enum=syscontract.MultiSignStatus" json:"status,omitempty"`
	// vote list
	VoteInfos []*MultiSignVoteInfo `protobuf:"bytes,5,rep,name=vote_infos,json=voteInfos,proto3" json:"vote_infos,omitempty"`
	//call system contract message
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	//call system contract result
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *MultiSignInfo) Reset()         { *m = MultiSignInfo{} }
func (m *MultiSignInfo) String() string { return proto.CompactTextString(m) }
func (*MultiSignInfo) ProtoMessage()    {}
func (*MultiSignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{0}
}
func (m *MultiSignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiSignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiSignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiSignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSignInfo.Merge(m, src)
}
func (m *MultiSignInfo) XXX_Size() int {
	return m.Size()
}
func (m *MultiSignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSignInfo proto.InternalMessageInfo

func (m *MultiSignInfo) GetPayload() *common.Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MultiSignInfo) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *MultiSignInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MultiSignInfo) GetStatus() MultiSignStatus {
	if m != nil {
		return m.Status
	}
	return MultiSignStatus_PROCESSING
}

func (m *MultiSignInfo) GetVoteInfos() []*MultiSignVoteInfo {
	if m != nil {
		return m.VoteInfos
	}
	return nil
}

func (m *MultiSignInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MultiSignInfo) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type MultiSignVoteInfo struct {
	Vote        VoteStatus               `protobuf:"varint,1,opt,name=vote,proto3,enum=syscontract.VoteStatus" json:"vote,omitempty"`
	Endorsement *common.EndorsementEntry `protobuf:"bytes,2,opt,name=endorsement,proto3" json:"endorsement,omitempty"`
}

func (m *MultiSignVoteInfo) Reset()         { *m = MultiSignVoteInfo{} }
func (m *MultiSignVoteInfo) String() string { return proto.CompactTextString(m) }
func (*MultiSignVoteInfo) ProtoMessage()    {}
func (*MultiSignVoteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{1}
}
func (m *MultiSignVoteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiSignVoteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiSignVoteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiSignVoteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSignVoteInfo.Merge(m, src)
}
func (m *MultiSignVoteInfo) XXX_Size() int {
	return m.Size()
}
func (m *MultiSignVoteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSignVoteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSignVoteInfo proto.InternalMessageInfo

func (m *MultiSignVoteInfo) GetVote() VoteStatus {
	if m != nil {
		return m.Vote
	}
	return VoteStatus_AGREE
}

func (m *MultiSignVoteInfo) GetEndorsement() *common.EndorsementEntry {
	if m != nil {
		return m.Endorsement
	}
	return nil
}

// revoke contract parameters
type MultiReq struct {
}

func (m *MultiReq) Reset()         { *m = MultiReq{} }
func (m *MultiReq) String() string { return proto.CompactTextString(m) }
func (*MultiReq) ProtoMessage()    {}
func (*MultiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{2}
}
func (m *MultiReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiReq.Merge(m, src)
}
func (m *MultiReq) XXX_Size() int {
	return m.Size()
}
func (m *MultiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiReq.DiscardUnknown(m)
}

var xxx_messageInfo_MultiReq proto.InternalMessageInfo

// revoke contract parameters
type MultiVote struct {
}

func (m *MultiVote) Reset()         { *m = MultiVote{} }
func (m *MultiVote) String() string { return proto.CompactTextString(m) }
func (*MultiVote) ProtoMessage()    {}
func (*MultiVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{3}
}
func (m *MultiVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiVote.Merge(m, src)
}
func (m *MultiVote) XXX_Size() int {
	return m.Size()
}
func (m *MultiVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiVote.DiscardUnknown(m)
}

var xxx_messageInfo_MultiVote proto.InternalMessageInfo

// revoke contract parameters
type MultiQuery struct {
}

func (m *MultiQuery) Reset()         { *m = MultiQuery{} }
func (m *MultiQuery) String() string { return proto.CompactTextString(m) }
func (*MultiQuery) ProtoMessage()    {}
func (*MultiQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a47020c8675fc4f, []int{4}
}
func (m *MultiQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiQuery.Merge(m, src)
}
func (m *MultiQuery) XXX_Size() int {
	return m.Size()
}
func (m *MultiQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MultiQuery proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("syscontract.MultiSignFunction", MultiSignFunction_name, MultiSignFunction_value)
	proto.RegisterEnum("syscontract.VoteStatus", VoteStatus_name, VoteStatus_value)
	proto.RegisterEnum("syscontract.MultiSignStatus", MultiSignStatus_name, MultiSignStatus_value)
	proto.RegisterEnum("syscontract.ContractStatus", ContractStatus_name, ContractStatus_value)
	proto.RegisterEnum("syscontract.MultiReq_Parameter", MultiReq_Parameter_name, MultiReq_Parameter_value)
	proto.RegisterEnum("syscontract.MultiVote_Parameter", MultiVote_Parameter_name, MultiVote_Parameter_value)
	proto.RegisterEnum("syscontract.MultiQuery_Parameter", MultiQuery_Parameter_name, MultiQuery_Parameter_value)
	proto.RegisterType((*MultiSignInfo)(nil), "syscontract.MultiSignInfo")
	proto.RegisterType((*MultiSignVoteInfo)(nil), "syscontract.MultiSignVoteInfo")
	proto.RegisterType((*MultiReq)(nil), "syscontract.MultiReq")
	proto.RegisterType((*MultiVote)(nil), "syscontract.MultiVote")
	proto.RegisterType((*MultiQuery)(nil), "syscontract.MultiQuery")
}

func init() { proto.RegisterFile("syscontract/multi_sign.proto", fileDescriptor_6a47020c8675fc4f) }

var fileDescriptor_6a47020c8675fc4f = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x5f, 0x4f, 0xd3, 0x50,
	0x14, 0x6f, 0x37, 0xd8, 0xd8, 0x19, 0x8c, 0x72, 0xa3, 0xd8, 0x18, 0x5c, 0x96, 0xa1, 0xc9, 0x9c,
	0xb1, 0x8b, 0x55, 0x5f, 0x4c, 0x34, 0x99, 0xdb, 0x1d, 0x4e, 0x59, 0x3b, 0x6e, 0x0b, 0x11, 0x5e,
	0x9a, 0x32, 0x2e, 0x65, 0x91, 0xde, 0x3b, 0xda, 0x3b, 0x92, 0x25, 0x7e, 0x08, 0x3f, 0x81, 0x9f,
	0xc7, 0x47, 0x1e, 0x7d, 0x34, 0xf0, 0x45, 0xcc, 0xed, 0x3a, 0xa8, 0x7f, 0xde, 0x7a, 0xce, 0xef,
	0xcf, 0xf9, 0xdd, 0x73, 0x52, 0xd8, 0x8a, 0x67, 0xf1, 0x88, 0x33, 0x11, 0xf9, 0x23, 0xd1, 0x0a,
	0xa7, 0xe7, 0x62, 0xec, 0xc5, 0xe3, 0x80, 0x19, 0x93, 0x88, 0x0b, 0x8e, 0xca, 0x19, 0xf4, 0xe1,
	0xbd, 0x11, 0x0f, 0x43, 0xce, 0x5a, 0x11, 0xbd, 0x98, 0xd2, 0x58, 0xcc, 0x29, 0xf5, 0xef, 0x39,
	0x58, 0x1b, 0x48, 0x9d, 0x33, 0x0e, 0x58, 0x9f, 0x9d, 0x72, 0xf4, 0x14, 0x8a, 0x13, 0x7f, 0x76,
	0xce, 0xfd, 0x13, 0x5d, 0xad, 0xa9, 0x8d, 0xb2, 0xb9, 0x6e, 0xcc, 0x95, 0xc6, 0x70, 0xde, 0x26,
	0x0b, 0x1c, 0x6d, 0xc3, 0xda, 0xc2, 0xde, 0x63, 0x7e, 0x48, 0xf5, 0x5c, 0x4d, 0x6d, 0x94, 0xc8,
	0xea, 0xa2, 0x69, 0xf9, 0x21, 0x45, 0x9b, 0x50, 0x08, 0xa9, 0x38, 0xe3, 0x27, 0x7a, 0x3e, 0x41,
	0xd3, 0x0a, 0xbd, 0x82, 0x42, 0x2c, 0x7c, 0x31, 0x8d, 0xf5, 0xa5, 0x9a, 0xda, 0xa8, 0x98, 0x5b,
	0x46, 0x26, 0xad, 0x71, 0x9b, 0xc9, 0x49, 0x38, 0x24, 0xe5, 0xa2, 0xb7, 0x00, 0x97, 0x5c, 0x50,
	0x6f, 0xcc, 0x4e, 0x79, 0xac, 0x2f, 0xd7, 0xf2, 0x8d, 0xb2, 0x59, 0xfd, 0xbf, 0xf2, 0x80, 0x0b,
	0x2a, 0x5f, 0x44, 0x4a, 0x97, 0xe9, 0x57, 0x8c, 0x74, 0x28, 0x86, 0x34, 0x8e, 0xfd, 0x80, 0xea,
	0x85, 0x24, 0xcd, 0xa2, 0x94, 0x31, 0x23, 0x1a, 0x4f, 0xcf, 0x85, 0x5e, 0xac, 0xa9, 0x8d, 0x55,
	0x92, 0x56, 0xf5, 0xaf, 0xb0, 0xf1, 0x8f, 0x23, 0x7a, 0x06, 0x4b, 0xd2, 0x33, 0x59, 0x50, 0xc5,
	0x7c, 0xf0, 0xc7, 0x7c, 0x49, 0x4a, 0x43, 0x27, 0x24, 0xf4, 0x06, 0xca, 0x94, 0x9d, 0xf0, 0x28,
	0xa6, 0x21, 0x65, 0x22, 0xd9, 0x51, 0xd9, 0xd4, 0x17, 0x4b, 0xc5, 0x77, 0x10, 0x66, 0x22, 0x9a,
	0x91, 0x2c, 0xb9, 0xfe, 0x0e, 0x56, 0x92, 0xe9, 0x84, 0x5e, 0xd4, 0x4d, 0x28, 0x0d, 0xfd, 0xc8,
	0x0f, 0xa9, 0xa0, 0x11, 0xba, 0x0f, 0x1b, 0xce, 0xa1, 0xe3, 0x75, 0x6c, 0xcb, 0x25, 0xed, 0x8e,
	0xeb, 0x59, 0xed, 0x01, 0xd6, 0x14, 0x54, 0x01, 0x90, 0xed, 0x01, 0x76, 0x3f, 0xd8, 0x5d, 0x4d,
	0x95, 0x9a, 0x44, 0x2f, 0x43, 0xd5, 0x9f, 0x64, 0x0d, 0xd6, 0xa0, 0x74, 0x60, 0xbb, 0xd8, 0xeb,
	0x5b, 0x3d, 0x5b, 0x53, 0x50, 0x09, 0x96, 0xdd, 0xcf, 0x5e, 0x5f, 0x6a, 0x1e, 0x03, 0x24, 0x9a,
	0xbd, 0x29, 0x8d, 0x66, 0xf5, 0xcd, 0xac, 0xe8, 0x96, 0xa5, 0x34, 0x5f, 0x64, 0xf6, 0xd2, 0x9b,
	0xb2, 0x91, 0x18, 0x73, 0x86, 0x8a, 0x90, 0x27, 0x78, 0x4f, 0x53, 0xd0, 0x0a, 0x2c, 0x49, 0x77,
	0x4d, 0x95, 0x92, 0xbd, 0x7d, 0x4c, 0x0e, 0xb5, 0x5c, 0x73, 0x1b, 0xe0, 0x6e, 0x39, 0x12, 0x68,
	0xef, 0x10, 0x2c, 0x53, 0x03, 0x14, 0x08, 0xfe, 0x88, 0x3b, 0xae, 0xa6, 0x36, 0x77, 0x60, 0xfd,
	0xaf, 0xdb, 0xcb, 0x47, 0x0d, 0x89, 0xdd, 0xc1, 0x8e, 0xd3, 0xb7, 0x76, 0x34, 0x05, 0x95, 0xa1,
	0xd8, 0xee, 0xda, 0x43, 0x17, 0x77, 0x35, 0x55, 0x16, 0x04, 0xf7, 0xf6, 0x1d, 0xdc, 0xd5, 0x72,
	0xd2, 0xa8, 0xd7, 0xee, 0xef, 0xe2, 0xae, 0x96, 0x6f, 0xbe, 0x86, 0x4a, 0x27, 0xbd, 0x49, 0xea,
	0x03, 0x50, 0xb0, 0x6c, 0x32, 0x68, 0xef, 0xce, 0x47, 0xf6, 0x88, 0x7d, 0x84, 0xad, 0x85, 0xc5,
	0x81, 0xfd, 0x49, 0x5a, 0xbc, 0x0f, 0x7e, 0x5c, 0x57, 0xd5, 0xab, 0xeb, 0xaa, 0xfa, 0xeb, 0xba,
	0xaa, 0x7e, 0xbb, 0xa9, 0x2a, 0x57, 0x37, 0x55, 0xe5, 0xe7, 0x4d, 0x55, 0x81, 0x47, 0x3c, 0x0a,
	0x8c, 0xd1, 0x99, 0x3f, 0x66, 0xa1, 0xff, 0x85, 0x46, 0xc6, 0xe4, 0x38, 0x7b, 0xf7, 0xa3, 0x2c,
	0xc4, 0xa3, 0xa0, 0x75, 0x57, 0xb6, 0x26, 0xc7, 0xcf, 0x03, 0xde, 0xba, 0x34, 0x5b, 0x19, 0xfe,
	0x71, 0x21, 0xf9, 0x01, 0x5f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x57, 0x23, 0x39, 0x06, 0xc3,
	0x03, 0x00, 0x00,
}

func (m *MultiSignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiSignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintMultiSign(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMultiSign(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VoteInfos) > 0 {
		for iNdEx := len(m.VoteInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMultiSign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintMultiSign(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMultiSign(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintMultiSign(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiSignVoteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSignVoteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiSignVoteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Endorsement != nil {
		{
			size, err := m.Endorsement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiSign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vote != 0 {
		i = encodeVarintMultiSign(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MultiVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MultiQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMultiSign(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultiSign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiSignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovMultiSign(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovMultiSign(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMultiSign(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMultiSign(uint64(m.Status))
	}
	if len(m.VoteInfos) > 0 {
		for _, e := range m.VoteInfos {
			l = e.Size()
			n += 1 + l + sovMultiSign(uint64(l))
		}
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMultiSign(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovMultiSign(uint64(l))
	}
	return n
}

func (m *MultiSignVoteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != 0 {
		n += 1 + sovMultiSign(uint64(m.Vote))
	}
	if m.Endorsement != nil {
		l = m.Endorsement.Size()
		n += 1 + l + sovMultiSign(uint64(l))
	}
	return n
}

func (m *MultiReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MultiVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MultiQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMultiSign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultiSign(x uint64) (n int) {
	return sovMultiSign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiSignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &common.Payload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MultiSignStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteInfos = append(m.VoteInfos, &MultiSignVoteInfo{})
			if err := m.VoteInfos[len(m.VoteInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiSignVoteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSignVoteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSignVoteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= VoteStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorsement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiSign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endorsement == nil {
				m.Endorsement = &common.EndorsementEntry{}
			}
			if err := m.Endorsement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMultiSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMultiSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMultiSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultiSign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultiSign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultiSign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultiSign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultiSign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultiSign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultiSign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultiSign = fmt.Errorf("proto: unexpected end of group")
)
