// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/chain_query.proto

package syscontract

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of chain query contract
type ChainQueryFunction int32

const (
	// get block by transactionId
	ChainQueryFunction_GET_BLOCK_BY_TX_ID ChainQueryFunction = 0
	// get transaction by transactionId
	ChainQueryFunction_GET_TX_BY_TX_ID ChainQueryFunction = 1
	// get block by block height
	ChainQueryFunction_GET_BLOCK_BY_HEIGHT ChainQueryFunction = 2
	// get chain information, include current height and consensus node list
	ChainQueryFunction_GET_CHAIN_INFO ChainQueryFunction = 3
	// get the last configuration block
	ChainQueryFunction_GET_LAST_CONFIG_BLOCK ChainQueryFunction = 4
	// get block by block hash
	ChainQueryFunction_GET_BLOCK_BY_HASH ChainQueryFunction = 5
	// get the list of chains the node knows
	ChainQueryFunction_GET_NODE_CHAIN_LIST ChainQueryFunction = 6
	// get governance information
	ChainQueryFunction_GET_GOVERNANCE_CONTRACT ChainQueryFunction = 7
	// get read/write set information by eight
	ChainQueryFunction_GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT ChainQueryFunction = 8
	// get read/write set information by hash
	ChainQueryFunction_GET_BLOCK_WITH_TXRWSETS_BY_HASH ChainQueryFunction = 9
	// get the last block
	ChainQueryFunction_GET_LAST_BLOCK ChainQueryFunction = 10
	// get full block by height
	ChainQueryFunction_GET_FULL_BLOCK_BY_HEIGHT ChainQueryFunction = 11
	// get block height by tx id
	ChainQueryFunction_GET_BLOCK_HEIGHT_BY_TX_ID ChainQueryFunction = 12
	// get block height by hash
	ChainQueryFunction_GET_BLOCK_HEIGHT_BY_HASH ChainQueryFunction = 13
	//get block header by height
	ChainQueryFunction_GET_BLOCK_HEADER_BY_HEIGHT ChainQueryFunction = 14
	// get archived block height
	ChainQueryFunction_GET_ARCHIVED_BLOCK_HEIGHT ChainQueryFunction = 15
	//get all contract info list
	ChainQueryFunction_GET_ALL_CONTRACTS ChainQueryFunction = 16
	// get merkle path by tx id
	ChainQueryFunction_GET_MERKLE_PATH_BY_TX_ID ChainQueryFunction = 17
)

var ChainQueryFunction_name = map[int32]string{
	0:  "GET_BLOCK_BY_TX_ID",
	1:  "GET_TX_BY_TX_ID",
	2:  "GET_BLOCK_BY_HEIGHT",
	3:  "GET_CHAIN_INFO",
	4:  "GET_LAST_CONFIG_BLOCK",
	5:  "GET_BLOCK_BY_HASH",
	6:  "GET_NODE_CHAIN_LIST",
	7:  "GET_GOVERNANCE_CONTRACT",
	8:  "GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT",
	9:  "GET_BLOCK_WITH_TXRWSETS_BY_HASH",
	10: "GET_LAST_BLOCK",
	11: "GET_FULL_BLOCK_BY_HEIGHT",
	12: "GET_BLOCK_HEIGHT_BY_TX_ID",
	13: "GET_BLOCK_HEIGHT_BY_HASH",
	14: "GET_BLOCK_HEADER_BY_HEIGHT",
	15: "GET_ARCHIVED_BLOCK_HEIGHT",
	16: "GET_ALL_CONTRACTS",
	17: "GET_MERKLE_PATH_BY_TX_ID",
}

var ChainQueryFunction_value = map[string]int32{
	"GET_BLOCK_BY_TX_ID":                0,
	"GET_TX_BY_TX_ID":                   1,
	"GET_BLOCK_BY_HEIGHT":               2,
	"GET_CHAIN_INFO":                    3,
	"GET_LAST_CONFIG_BLOCK":             4,
	"GET_BLOCK_BY_HASH":                 5,
	"GET_NODE_CHAIN_LIST":               6,
	"GET_GOVERNANCE_CONTRACT":           7,
	"GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT": 8,
	"GET_BLOCK_WITH_TXRWSETS_BY_HASH":   9,
	"GET_LAST_BLOCK":                    10,
	"GET_FULL_BLOCK_BY_HEIGHT":          11,
	"GET_BLOCK_HEIGHT_BY_TX_ID":         12,
	"GET_BLOCK_HEIGHT_BY_HASH":          13,
	"GET_BLOCK_HEADER_BY_HEIGHT":        14,
	"GET_ARCHIVED_BLOCK_HEIGHT":         15,
	"GET_ALL_CONTRACTS":                 16,
	"GET_MERKLE_PATH_BY_TX_ID":          17,
}

func (x ChainQueryFunction) String() string {
	return proto.EnumName(ChainQueryFunction_name, int32(x))
}

func (ChainQueryFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdd819546e001668, []int{0}
}

func init() {
	proto.RegisterEnum("syscontract.ChainQueryFunction", ChainQueryFunction_name, ChainQueryFunction_value)
}

func init() { proto.RegisterFile("syscontract/chain_query.proto", fileDescriptor_fdd819546e001668) }

var fileDescriptor_fdd819546e001668 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x13, 0x18, 0x03, 0xce, 0x60, 0xf3, 0xce, 0x34, 0xc6, 0x80, 0x06, 0x21, 0xc4, 0x0d,
	0x12, 0x89, 0x04, 0x4f, 0xe0, 0x26, 0x4e, 0x62, 0xcd, 0x24, 0x90, 0x98, 0xad, 0x70, 0x63, 0xb5,
	0xd1, 0x14, 0x26, 0x44, 0x52, 0xb2, 0x14, 0xa9, 0x0f, 0xc0, 0x3d, 0x8f, 0xc5, 0x65, 0x2f, 0xb9,
	0x44, 0xed, 0x8b, 0x20, 0xa7, 0x84, 0xa4, 0x20, 0xed, 0xd2, 0xff, 0xff, 0xfb, 0xf3, 0xef, 0xa3,
	0x03, 0x83, 0xcb, 0xf9, 0x65, 0x56, 0x16, 0x75, 0x35, 0xce, 0x6a, 0x27, 0xfb, 0x38, 0xbe, 0x28,
	0xd4, 0x97, 0xd9, 0x79, 0x35, 0xb7, 0xa7, 0x55, 0x59, 0x97, 0xb8, 0xd3, 0xb3, 0x9f, 0x7f, 0xdb,
	0x02, 0x74, 0x75, 0xe4, 0xad, 0x4e, 0xf8, 0xb3, 0x22, 0xab, 0x2f, 0xca, 0x02, 0xef, 0x01, 0x06,
	0x4c, 0xaa, 0xa1, 0x88, 0xdd, 0x13, 0x35, 0x7c, 0xaf, 0xe4, 0x48, 0x71, 0x8f, 0x18, 0x78, 0x00,
	0x7b, 0x5a, 0x97, 0xa3, 0x4e, 0x34, 0xf1, 0x08, 0x0e, 0x36, 0xc2, 0x21, 0xe3, 0x41, 0x28, 0xc9,
	0x35, 0x44, 0xd8, 0xd5, 0x86, 0x1b, 0x52, 0x1e, 0x29, 0x1e, 0xf9, 0x31, 0xb9, 0x8e, 0xc7, 0x70,
	0xa8, 0x35, 0x41, 0x53, 0xa9, 0xdc, 0x38, 0xf2, 0x79, 0xb0, 0xbe, 0x48, 0xb6, 0xf0, 0x10, 0xf6,
	0x37, 0x39, 0x34, 0x0d, 0xc9, 0x8d, 0x16, 0x1f, 0xc5, 0x1e, 0xfb, 0x83, 0x12, 0x3c, 0x95, 0x64,
	0x1b, 0x1f, 0xc2, 0x91, 0x36, 0x82, 0xf8, 0x94, 0x25, 0x11, 0x8d, 0x5c, 0xa6, 0x81, 0x32, 0xa1,
	0xae, 0x24, 0x37, 0xf1, 0x19, 0x3c, 0xe9, 0x60, 0x67, 0x5c, 0x86, 0x4a, 0x8e, 0x92, 0xb3, 0x94,
	0xc9, 0xb4, 0x57, 0xf1, 0x16, 0x3e, 0x85, 0xc7, 0x57, 0xc5, 0x74, 0x83, 0xdb, 0xed, 0x3f, 0x9a,
	0xce, 0xeb, 0xb2, 0x80, 0x8f, 0xe0, 0xbe, 0xd6, 0xfc, 0x77, 0x42, 0xfc, 0xf7, 0xf3, 0x1d, 0x1c,
	0xc0, 0x71, 0x87, 0x5d, 0xab, 0xdd, 0xc4, 0xee, 0xb4, 0x97, 0xff, 0xb5, 0x9b, 0xe7, 0xee, 0xa2,
	0x05, 0x0f, 0xfa, 0x2e, 0xf5, 0x58, 0xd2, 0x83, 0xef, 0xb6, 0x70, 0x9a, 0xb8, 0x21, 0x3f, 0x65,
	0xde, 0x06, 0x86, 0xec, 0xb5, 0x63, 0xa4, 0x42, 0xfc, 0x9d, 0x47, 0x4a, 0x48, 0xfb, 0xe6, 0x6b,
	0x96, 0x9c, 0x08, 0xa6, 0xde, 0x50, 0x19, 0x76, 0x8d, 0xf6, 0x87, 0xf9, 0x8f, 0xa5, 0x65, 0x2e,
	0x96, 0x96, 0xf9, 0x6b, 0x69, 0x99, 0xdf, 0x57, 0x96, 0xb1, 0x58, 0x59, 0xc6, 0xcf, 0x95, 0x65,
	0xc0, 0xa0, 0xac, 0x72, 0xbb, 0xd9, 0xa2, 0xcf, 0xe3, 0x4f, 0xe7, 0x95, 0x3d, 0x9d, 0xd8, 0xbd,
	0x05, 0xfa, 0xd0, 0xb7, 0xca, 0x2a, 0x77, 0xba, 0xa3, 0x33, 0x9d, 0xbc, 0xc8, 0x4b, 0xe7, 0xeb,
	0x4b, 0xa7, 0x97, 0x9f, 0x6c, 0x37, 0x4b, 0xf8, 0xea, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f,
	0xa1, 0x1a, 0x0b, 0xa5, 0x02, 0x00, 0x00,
}
