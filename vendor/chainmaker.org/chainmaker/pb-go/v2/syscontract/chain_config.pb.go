// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/chain_config.proto

package syscontract

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of chain config contract
type ChainConfigFunction int32

const (
	// get chain configuration
	ChainConfigFunction_GET_CHAIN_CONFIG ChainConfigFunction = 0
	// get the latest configuration block
	// the incoming block height must exist in the database
	ChainConfigFunction_GET_CHAIN_CONFIG_AT ChainConfigFunction = 1
	// update core
	ChainConfigFunction_CORE_UPDATE ChainConfigFunction = 2
	// update block
	ChainConfigFunction_BLOCK_UPDATE ChainConfigFunction = 3
	// add trusted certificate (org_id and root)
	ChainConfigFunction_TRUST_ROOT_ADD ChainConfigFunction = 4
	// [self] modify an individual's own trusted root certificate [org_id must exist in the original trust_roots,
	// and the new root certificate must be different from other certificates]
	ChainConfigFunction_TRUST_ROOT_UPDATE ChainConfigFunction = 5
	// delete trusted root certificate [org_ ID should be in trust_ The nodes in nodes need to be deleted]
	ChainConfigFunction_TRUST_ROOT_DELETE ChainConfigFunction = 6
	// organization add node address
	// org_id must already exist in nodes，you can add addresses in batches
	// the parameter is addresses. Single addresses are separated by ","
	// ip+port and peerid cannot be repeated
	// Deprecated , replace by NODE_ID_ADD
	ChainConfigFunction_NODE_ADDR_ADD ChainConfigFunction = 7
	// [self]the organization updates an address
	//[org_id and address must already exist in nodes, new_address is the new address. ip+port and peerId cannot be duplicated]
	// Deprecated , replace by NODE_ID_UPDATE
	ChainConfigFunction_NODE_ADDR_UPDATE ChainConfigFunction = 8
	// organization delete node address [org_id and address must already exist in nodes]
	// Deprecated , replace by NODE_ID_DELETE
	ChainConfigFunction_NODE_ADDR_DELETE ChainConfigFunction = 9
	// organization add node address in batches [org_id在nodes不存在，批量添加地址，参数为node_ids，单地址用逗号","隔开。nodeId不能重复]
	ChainConfigFunction_NODE_ORG_ADD ChainConfigFunction = 10
	// organization update
	// org_id must already exist in nodes，the parameter is addresses，Single addresses are separated by ","
	// ip+port and peerid cannot be repeated
	ChainConfigFunction_NODE_ORG_UPDATE ChainConfigFunction = 11
	// organization delete, org_id must already exist in nodes
	ChainConfigFunction_NODE_ORG_DELETE ChainConfigFunction = 12
	// add consensus parameters, key is not exit in ext_config
	ChainConfigFunction_CONSENSUS_EXT_ADD ChainConfigFunction = 13
	// update onsensus parameters, key exit in ext_config
	ChainConfigFunction_CONSENSUS_EXT_UPDATE ChainConfigFunction = 14
	// delete onsensus parameters, key exit in ext_config
	ChainConfigFunction_CONSENSUS_EXT_DELETE ChainConfigFunction = 15
	// add permission
	ChainConfigFunction_PERMISSION_ADD ChainConfigFunction = 16
	// update permission
	ChainConfigFunction_PERMISSION_UPDATE ChainConfigFunction = 17
	// delete permission
	ChainConfigFunction_PERMISSION_DELETE ChainConfigFunction = 18
	// organization add node_id
	// org_id must already exist in nodes，you can add node_id in batches
	// the parameter is node_ids. Single node_ids are separated by ","
	// node_id cannot be repeated
	ChainConfigFunction_NODE_ID_ADD ChainConfigFunction = 19
	// [self]the organization updates a node_ids
	//[org_id and node_ids must already exist in nodes, new_node_id is the new node_id. node_id cannot be duplicated]
	ChainConfigFunction_NODE_ID_UPDATE ChainConfigFunction = 20
	// organization delete node_id [org_id and node_id must already exist in nodes]
	ChainConfigFunction_NODE_ID_DELETE ChainConfigFunction = 21
	// add trusted member (org_id signcert role  node_id)
	ChainConfigFunction_TRUST_MEMBER_ADD ChainConfigFunction = 22
	// [self] modify an individual's own trusted member [node_id must exist in the original trust_members,
	// and the new trust member must be different from other trust members]
	ChainConfigFunction_TRUST_MEMBER_UPDATE ChainConfigFunction = 23
	// delete trusted member certificate [node_ ID should be in trust_ The nodes in nodes need to be deleted]
	ChainConfigFunction_TRUST_MEMBER_DELETE ChainConfigFunction = 24
)

var ChainConfigFunction_name = map[int32]string{
	0:  "GET_CHAIN_CONFIG",
	1:  "GET_CHAIN_CONFIG_AT",
	2:  "CORE_UPDATE",
	3:  "BLOCK_UPDATE",
	4:  "TRUST_ROOT_ADD",
	5:  "TRUST_ROOT_UPDATE",
	6:  "TRUST_ROOT_DELETE",
	7:  "NODE_ADDR_ADD",
	8:  "NODE_ADDR_UPDATE",
	9:  "NODE_ADDR_DELETE",
	10: "NODE_ORG_ADD",
	11: "NODE_ORG_UPDATE",
	12: "NODE_ORG_DELETE",
	13: "CONSENSUS_EXT_ADD",
	14: "CONSENSUS_EXT_UPDATE",
	15: "CONSENSUS_EXT_DELETE",
	16: "PERMISSION_ADD",
	17: "PERMISSION_UPDATE",
	18: "PERMISSION_DELETE",
	19: "NODE_ID_ADD",
	20: "NODE_ID_UPDATE",
	21: "NODE_ID_DELETE",
	22: "TRUST_MEMBER_ADD",
	23: "TRUST_MEMBER_UPDATE",
	24: "TRUST_MEMBER_DELETE",
}

var ChainConfigFunction_value = map[string]int32{
	"GET_CHAIN_CONFIG":     0,
	"GET_CHAIN_CONFIG_AT":  1,
	"CORE_UPDATE":          2,
	"BLOCK_UPDATE":         3,
	"TRUST_ROOT_ADD":       4,
	"TRUST_ROOT_UPDATE":    5,
	"TRUST_ROOT_DELETE":    6,
	"NODE_ADDR_ADD":        7,
	"NODE_ADDR_UPDATE":     8,
	"NODE_ADDR_DELETE":     9,
	"NODE_ORG_ADD":         10,
	"NODE_ORG_UPDATE":      11,
	"NODE_ORG_DELETE":      12,
	"CONSENSUS_EXT_ADD":    13,
	"CONSENSUS_EXT_UPDATE": 14,
	"CONSENSUS_EXT_DELETE": 15,
	"PERMISSION_ADD":       16,
	"PERMISSION_UPDATE":    17,
	"PERMISSION_DELETE":    18,
	"NODE_ID_ADD":          19,
	"NODE_ID_UPDATE":       20,
	"NODE_ID_DELETE":       21,
	"TRUST_MEMBER_ADD":     22,
	"TRUST_MEMBER_UPDATE":  23,
	"TRUST_MEMBER_DELETE":  24,
}

func (x ChainConfigFunction) String() string {
	return proto.EnumName(ChainConfigFunction_name, int32(x))
}

func (ChainConfigFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_136926d916a77e0f, []int{0}
}

func init() {
	proto.RegisterEnum("syscontract.ChainConfigFunction", ChainConfigFunction_name, ChainConfigFunction_value)
}

func init() { proto.RegisterFile("syscontract/chain_config.proto", fileDescriptor_136926d916a77e0f) }

var fileDescriptor_136926d916a77e0f = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x5f, 0x4e, 0xea, 0x40,
	0x14, 0xc6, 0xdb, 0x7b, 0xb9, 0xdc, 0x7b, 0x87, 0x7f, 0xc3, 0x14, 0x84, 0x17, 0xbb, 0x00, 0x13,
	0xdb, 0x44, 0x57, 0x50, 0xda, 0x01, 0x1b, 0xa1, 0x43, 0xda, 0x92, 0x18, 0x5f, 0x26, 0xd0, 0x68,
	0x25, 0xc6, 0x0e, 0x29, 0xd5, 0xc4, 0x5d, 0xb8, 0x16, 0x57, 0xe1, 0x23, 0x8f, 0x3e, 0x1a, 0xd8,
	0x88, 0x99, 0x61, 0x90, 0x16, 0x1e, 0xfb, 0x3b, 0xe7, 0xfb, 0xe5, 0xe4, 0xeb, 0x00, 0x7d, 0xf9,
	0xba, 0x8c, 0x58, 0x92, 0xa5, 0xd3, 0x28, 0x33, 0xa3, 0x87, 0xe9, 0x3c, 0xa1, 0x11, 0x4b, 0xee,
	0xe7, 0xb1, 0xb1, 0x48, 0x59, 0xc6, 0x50, 0x25, 0x37, 0x3f, 0x7b, 0x2f, 0x01, 0xcd, 0xe6, 0x3b,
	0xb6, 0x58, 0xe9, 0x3f, 0x27, 0x51, 0x36, 0x67, 0x09, 0x6a, 0x01, 0x38, 0xc0, 0x21, 0xb5, 0xaf,
	0x2c, 0xd7, 0xa3, 0x36, 0xf1, 0xfa, 0xee, 0x00, 0x2a, 0xa8, 0x03, 0xb4, 0x43, 0x4a, 0xad, 0x10,
	0xaa, 0xa8, 0x01, 0x2a, 0x36, 0xf1, 0x31, 0x9d, 0x8c, 0x1d, 0x2b, 0xc4, 0xf0, 0x17, 0x82, 0xa0,
	0xda, 0x1b, 0x12, 0xfb, 0x7a, 0x47, 0x7e, 0x23, 0x04, 0xea, 0xa1, 0x3f, 0x09, 0x42, 0xea, 0x13,
	0x12, 0x52, 0xcb, 0x71, 0x60, 0x09, 0xb5, 0x41, 0x33, 0xc7, 0xe4, 0xea, 0x9f, 0x03, 0xec, 0xe0,
	0x21, 0x0e, 0x31, 0x2c, 0xa3, 0x26, 0xa8, 0x79, 0xc4, 0xc1, 0x3c, 0xeb, 0x0b, 0xc1, 0x5f, 0x7e,
	0xe6, 0x1e, 0xc9, 0xfc, 0xbf, 0x22, 0x95, 0xf1, 0xff, 0xfc, 0x24, 0x41, 0x89, 0x3f, 0x10, 0x69,
	0x80, 0x34, 0xd0, 0xf8, 0x21, 0x32, 0x5c, 0x29, 0x40, 0x99, 0xad, 0xf2, 0x8b, 0x6c, 0xe2, 0x05,
	0xd8, 0x0b, 0x26, 0x01, 0xc5, 0x37, 0xdb, 0xfb, 0x6b, 0xa8, 0x0b, 0x5a, 0x45, 0x2c, 0x2d, 0xf5,
	0xe3, 0x89, 0x54, 0x35, 0x78, 0x0f, 0x63, 0xec, 0x8f, 0xdc, 0x20, 0x70, 0x89, 0x27, 0x3c, 0x90,
	0xeb, 0x73, 0x4c, 0x4a, 0x9a, 0x07, 0x58, 0x1a, 0x10, 0x2f, 0x5b, 0x5c, 0xe8, 0x3a, 0x22, 0xae,
	0x71, 0xe5, 0x0e, 0xc8, 0x6c, 0x2b, 0xcf, 0x64, 0xb0, 0xcd, 0x7b, 0xd9, 0xf6, 0x3a, 0xc2, 0xa3,
	0x1e, 0xde, 0x76, 0x78, 0xc2, 0x7f, 0x6a, 0x81, 0x4a, 0x45, 0xe7, 0x68, 0x20, 0x3d, 0xdd, 0x5e,
	0xfc, 0xb1, 0xd6, 0xd5, 0xd5, 0x5a, 0x57, 0xbf, 0xd6, 0xba, 0xfa, 0xb6, 0xd1, 0x95, 0xd5, 0x46,
	0x57, 0x3e, 0x37, 0xba, 0x02, 0x4e, 0x59, 0x1a, 0x1b, 0xe2, 0xcd, 0x3d, 0x4d, 0x1f, 0xef, 0x52,
	0x63, 0x31, 0x33, 0x72, 0xaf, 0xed, 0x36, 0x3f, 0x62, 0x69, 0x6c, 0xee, 0x3f, 0xcd, 0xc5, 0xec,
	0x3c, 0x66, 0xe6, 0xcb, 0x85, 0x99, 0xdb, 0x9f, 0x95, 0xc5, 0x8b, 0xbd, 0xfc, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0xa6, 0xc3, 0xa3, 0xbf, 0xd3, 0x02, 0x00, 0x00,
}
